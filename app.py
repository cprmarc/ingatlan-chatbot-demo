import streamlit as st
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import FAISS
from langchain.text_splitter import CharacterTextSplitter
from langchain.docstore.document import Document
from langchain.chains.question_answering import load_qa_chain
from langchain.chat_models import ChatOpenAI
import os
import requests
from bs4 import BeautifulSoup

# üé® Custom CSS styling
st.markdown("""
<style>
    /* H√°tt√©r sz√≠nek */
    .stApp {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    /* F≈ëc√≠m styling */
    .main-header {
        text-align: center;
        color: white;
        font-size: 3rem;
        font-weight: bold;
        margin-bottom: 2rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }
    
    /* Input box styling */
    .stTextInput > div > div > input {
        background-color: rgba(255, 255, 255, 0.9);
        border: 2px solid #4CAF50;
        border-radius: 25px;
        padding: 15px 20px;
        font-size: 16px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    /* Chat bubble v√°laszokhoz */
    .chat-message {
        background-color: rgba(255, 255, 255, 0.95);
        padding: 20px;
        border-radius: 15px;
        margin: 15px 0;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        border-left: 5px solid #4CAF50;
    }
    
    /* Sidebar styling */
    .css-1d391kg {
        background: linear-gradient(180deg, #4CAF50 0%, #45a049 100%);
    }
    
    /* Success/warning √ºzenetek */
    .stSuccess {
        background-color: rgba(76, 175, 80, 0.1);
        border: 1px solid #4CAF50;
        border-radius: 10px;
    }
    
    /* Spinner szem√©lyre szab√°s */
    .stSpinner > div {
        border-top-color: #4CAF50 !important;
    }
    
    /* Footer */
    .footer {
        position: fixed;
        left: 0;
        bottom: 0;
        width: 100%;
        background-color: rgba(0,0,0,0.8);
        color: white;
        text-align: center;
        padding: 10px;
        font-size: 12px;
    }
</style>
""", unsafe_allow_html=True)

# üîß Streamlit konfigur√°ci√≥
st.set_page_config(
    page_title="üè° Ingatlan Asszisztens",
    page_icon="üè°",
    layout="wide",
    initial_sidebar_state="expanded"
)

# üìä Sidebar konfigur√°ci√≥
with st.sidebar:
    st.markdown("### ‚öôÔ∏è Be√°ll√≠t√°sok")
    
    # Sz√≠nt√©ma v√°laszt√≥
    theme = st.selectbox("üé® Sz√≠nt√©ma:", 
                        ["Z√∂ld (alap√©rtelmezett)", "K√©k", "Narancs", "Lila"])
    
    # V√°lasz hossz be√°ll√≠t√°s
    max_words = st.slider("üìù Max sz√≥sz√°m k√©rd√©sben:", 5, 20, 10)
    response_length = st.selectbox("üìè V√°lasz hossza:", 
                                  ["R√∂vid (3 mondat)", "K√∂zepes (5 mondat)", "R√©szletes (8 mondat)"])
    
    st.markdown("---")
    st.markdown("### üìã Mire tudok v√°laszolni?")
    st.markdown("""
    - üè† Ingatlanv√°s√°rl√°s menete
    - üí∞ Lak√°shitel inform√°ci√≥k  
    - üìã Szerz≈ëd√©sek, jogok
    - üìù Birtokbaad√°si jegyz≈ëk√∂nyv
    """)

# Dinamikus sz√≠nt√©ma
color_schemes = {
    "Z√∂ld (alap√©rtelmezett)": "#4CAF50",
    "K√©k": "#2196F3", 
    "Narancs": "#FF9800",
    "Lila": "#9C27B0"
}
primary_color = color_schemes[theme]

# Sz√∂vegt√∂rdel≈ë be√°ll√≠t√°sa
text_splitter = CharacterTextSplitter(separator="\n", chunk_size=300, chunk_overlap=30)
all_docs = []

# URL lista
url_list = [
    "https://tudastar.ingatlan.com/tippek/az-ingatlanvasarlas-menete/",
    "https://tudastar.ingatlan.com/tippek/tulajdonjog-fenntartashoz-kapcsolodo-vevoi-jog/",
    "https://tudastar.ingatlan.com/tippek/birtokbaadasi-jegyzokonyv-mire-valo-miert-jo-hogyan-toltsd-ki/",
    "https://bankmonitor.hu/lakashitel-igenyles",
]

@st.cache_data
def scrape_url(url):
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, "html.parser")
        paragraphs = soup.find_all("p")
        content = "\n".join(p.get_text() for p in paragraphs)
        return content
    except Exception as e:
        st.warning(f"‚ùå Nem siker√ºlt lek√©rni: {url}")
        return ""

# Adatok bet√∂lt√©se
with st.spinner("üîÑ Tud√°sb√°zis bet√∂lt√©se..."):
    for url in url_list:
        text = scrape_url(url)
        if text:
            chunks = text_splitter.split_text(text)
            all_docs.extend([Document(page_content=chunk) for chunk in chunks])

# FAISS index
faiss_index_path = "faiss_index"
embedding = OpenAIEmbeddings()
vectorstore = None

if os.path.exists(faiss_index_path):
    try:
        vectorstore = FAISS.load_local(faiss_index_path, embedding)
        st.success("‚úÖ Index bet√∂ltve!")
    except Exception as e:
        vectorstore = None

if vectorstore is None and all_docs:
    with st.spinner("üèóÔ∏è Index l√©trehoz√°sa..."):
        vectorstore = FAISS.from_documents(all_docs, embedding)
        vectorstore.save_local(faiss_index_path)
        st.success("‚úÖ Index l√©trehozva!")

def get_answer(query, max_sentences=3):
    if len(query.split()) > max_words:
        return f"‚ùå K√©rlek, max {max_words} sz√≥b√≥l √°ll√≥ k√©rd√©st tegy√©l fel."
    
    if vectorstore is None:
        return "‚ùå A tud√°sb√°zis jelenleg nem el√©rhet≈ë."
    
    retriever = vectorstore.as_retriever(search_kwargs={"k": 5})
    relevant_docs = retriever.get_relevant_documents(query)
    
    if not relevant_docs:
        return "ü§∑‚Äç‚ôÇÔ∏è Sajnos ebben nem tudok seg√≠teni."
    
    # V√°lasz hossz be√°ll√≠t√°sa
    sentence_map = {
        "R√∂vid (3 mondat)": 3,
        "K√∂zepes (5 mondat)": 5, 
        "R√©szletes (8 mondat)": 8
    }
    max_sentences = sentence_map[response_length]
    
    short_query = f"V√°laszolj a k√©rd√©sre r√∂viden, max {max_sentences} mondatban: " + query
    chain = load_qa_chain(ChatOpenAI(temperature=0, max_tokens=150), chain_type="stuff")
    result = chain.run(input_documents=relevant_docs, question=short_query)
    return result

# üåê F≈ëoldal
st.markdown('<h1 class="main-header">üè° Ingatlan Asszisztens</h1>', unsafe_allow_html=True)

# K√∂zponti chat interface
col1, col2, col3 = st.columns([1, 2, 1])

with col2:
    st.markdown("### üí¨ Tedd fel a k√©rd√©sed!")
    question = st.text_input("", 
                           placeholder=f"√çrj ide max {max_words} sz√≥t...",
                           help="P√©ld√°ul: lak√°shitel kamatok, birtokbaad√°s menete")
    
    if question:
        with st.spinner("ü§î Gondolkozom..."):
            response = get_answer(question)
        
        # V√°laszt chat bubble-ben megjelen√≠teni
        st.markdown(f"""
        <div class="chat-message">
        <strong>ü§ñ V√°lasz:</strong><br>
        {response}
        </div>
        """, unsafe_allow_html=True)

# Footer
st.markdown("""
<div class="footer">
    Made with ‚ù§Ô∏è using Streamlit | üè° Ingatlan Asszisztens v1.0
</div>
""", unsafe_allow_html=True)
